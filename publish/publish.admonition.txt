/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
__webpack_require__.r(__webpack_exports__);

function createEl(tag, t, e) {
    const i = document.createElement(tag);
    "string" == typeof t &&
        (t = {
            cls: t
        });
    const r = t || {}, o = r.cls, s = r.text, a = r.attr, l = r.title, c = r.value, u = r.type, h = e ? e : r.parent, p = r.prepend, d = r.href;
    return (o &&
        (Array.isArray(o)
            ? (i.className = o.join(" "))
            : (i.className = o)),
        s && (i.textContent = s),
        a &&
            Object.keys(a).forEach((t) => {
                const n = a[t];
                null !== n && i.setAttribute(t, String(n));
            }),
        l && (i.title = l),
        c &&
            (i instanceof HTMLInputElement ||
                i instanceof HTMLSelectElement ||
                i instanceof HTMLOptionElement) &&
            (i.value = c),
        /* u && i instanceof HTMLInputElement && (i.type = u), */
        u && i instanceof HTMLStyleElement && i.setAttribute("type", u),
        d &&
            (i instanceof HTMLAnchorElement || i instanceof HTMLLinkElement) &&
            (i.href = d),
        h && (p ? h.insertBefore(i, h.firstChild) : h.appendChild(i)),
        i);
}
//@ts-ignore-line
const createDiv = function (o, e) {
    return createEl("div", o, e);
};
Node.prototype.createDiv = function (o, cb) {
    return createDiv(o, this);
};
Node.prototype.createEl = function (tag, o, cb) {
    return createEl(tag, o, this);
};
Element.prototype.addClass = function (...args) {
    const e = [];
    for (let t = 0; t < args.length; t++)
        e[t] = args[t];
    this.addClasses(e);
};
Element.prototype.addClasses = function (e) {
    for (let t = 0; t < e.length; t++)
        this.classList.add(e[t]);
};
function getAdmonitionElement(type, title, icon, color, collapse, id) {
    var _a;
    let admonition, titleEl, attrs = {
        style: `--admonition-color: ${color};`
    };
    if (collapse && collapse != "none") {
        if (collapse === "open") {
            attrs.open = "open";
        }
        admonition = createEl("details", {
            cls: `admonition admonition-${type} admonition-plugin`,
            attr: attrs
        });
        titleEl = admonition.createEl("summary", {
            cls: `admonition-title ${!(title === null || title === void 0 ? void 0 : title.trim().length) ? "no-title" : ""}`
        });
    }
    else {
        admonition = createDiv({
            cls: `admonition admonition-${type} admonition-plugin`,
            attr: attrs
        });
        titleEl = admonition.createDiv({
            cls: `admonition-title ${!(title === null || title === void 0 ? void 0 : title.trim().length) ? "no-title" : ""}`
        });
    }
    if (id) {
        admonition.id = id;
    }
    if (title && title.trim().length) {
        /**
         * Title structure
         * <div|summary>.admonition-title
         *      <element>.admonition-title-content - Rendered Markdown top-level element (e.g. H1/2/3 etc, p)
         *          div.admonition-title-icon
         *              svg
         *          div.admonition-title-markdown - Container of rendered markdown
         *              ...rendered markdown children...
         */
        //get markdown
        const markdownHolder = createDiv();
        //MarkdownRenderer.renderMarkdown(title, markdownHolder, "", null);
        //admonition-title-content is first child of rendered markdown
        const admonitionTitleContent = 
        /* markdownHolder?.children[0]?.tagName === "P"
    ? createDiv()
    : markdownHolder.children[0] ??  */ createDiv();
        //get children of markdown element, then remove them
        const markdownElements = Array.from(((_a = markdownHolder.children[0]) === null || _a === void 0 ? void 0 : _a.childNodes) || []);
        admonitionTitleContent.innerHTML = "";
        admonitionTitleContent.addClass("admonition-title-content");
        //build icon element
        const iconEl = admonitionTitleContent.createDiv("admonition-title-icon");
        if (icon) {
            iconEl.innerHTML = icon;
        }
        //add markdown children back
        const admonitionTitleMarkdown = admonitionTitleContent.createDiv("admonition-title-markdown");
        admonitionTitleMarkdown.innerText = title;
        /* for (let i = 0; i < markdownElements.length; i++) {
            admonitionTitleMarkdown.appendChild(markdownElements[i]);
        } */
        titleEl.appendChild(admonitionTitleContent || createDiv());
    }
    //add them to title element
    if (collapse) {
        titleEl.createDiv("collapser").createDiv("handle");
    }
    return admonition;
}
function startsWithAny(str, needles) {
    for (let i = 0; i < needles.length; i++) {
        if (str.startsWith(needles[i])) {
            return i;
        }
    }
    return false;
}
function getParametersFromSource(type, src) {
    const keywordTokens = ["title:", "collapse:", "icon:", "color:"];
    const keywords = ["title", "collapse", "icon", "color"];
    let lines = src.split("\n");
    let skipLines = 0;
    let params = {};
    for (let i = 0; i < lines.length; i++) {
        let keywordIndex = startsWithAny(lines[i], keywordTokens);
        if (keywordIndex === false) {
            break;
        }
        let foundKeyword = keywords[keywordIndex];
        if (params[foundKeyword] !== undefined) {
            break;
        }
        params[foundKeyword] = lines[i]
            .substr(keywordTokens[keywordIndex].length)
            .trim();
        ++skipLines;
    }
    let { title = type[0].toUpperCase() + type.slice(1).toLowerCase(), collapse, icon, color } = params;
    let content = lines.slice(skipLines).join("\n");
    /**
     * If the admonition should collapse, but something other than open or closed was provided, set to closed.
     */
    if (collapse !== undefined &&
        collapse !== "none" &&
        collapse !== "open" &&
        collapse !== "closed") {
        collapse = "closed";
    }
    /**
     * If the admonition should collapse, but title was blanked, set the default title.
     */
    if (title.trim() === "" && collapse !== undefined && collapse !== "none") {
        title = type[0].toUpperCase() + type.slice(1).toLowerCase();
        return;
    }
    return { title, collapse, content, icon, color };
}
const ADMONITION_ICON_MAP = {};
document.addEventListener("DOMContentLoaded", function (event) {
    //do work
    const admonitions = document.querySelectorAll("pre[class^='language-ad']");
    if (!admonitions.length)
        return;
    for (let admonitionBlock of Array.from(admonitions)) {
        const [, type] = admonitionBlock.classList.toString().match(/language-ad-(\w+)/);
        if (!type)
            continue;
        if (!(type in ADMONITION_ICON_MAP))
            continue;
        let { title = type[0].toUpperCase() + type.slice(1).toLowerCase(), collapse, content, icon = ADMONITION_ICON_MAP[type].icon, color = ADMONITION_ICON_MAP[type].color, } = getParametersFromSource(type, admonitionBlock.innerText);
        let admonition = getAdmonitionElement(type, title, icon, color, collapse);
        const contentHolder = admonition.createDiv("admonition-content-holder");
        const admonitionContent = contentHolder.createDiv("admonition-content");
        admonitionContent.innerText = content;
        admonitionBlock.replaceWith(admonition);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGlzaC5hZG1vbml0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicHVibGlzaC5hZG1vbml0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sb0JBQW9CLENBQUM7QUErQjVCLFNBQVMsUUFBUSxDQUNiLEdBQU0sRUFDTixDQUEyQixFQUMzQixDQUFlO0lBRWYsTUFBTSxDQUFDLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN0QyxRQUFRLElBQUksT0FBTyxDQUFDO1FBQ2hCLENBQUMsQ0FBQyxHQUFHO1lBQ0QsR0FBRyxFQUFFLENBQUM7U0FDVCxDQUFDLENBQUM7SUFDUCxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxFQUNiLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUNULENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUNWLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUNWLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUNYLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUNYLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUNWLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFDcEIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQ2IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDZixPQUFPLENBQ0gsQ0FBQztRQUNHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDYixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDN0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM1QixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMs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Q0FBQyxHQUFHLGVBQWUsQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDakYsSUFBSSxDQUFDLElBQUk7WUFBRSxTQUFTO1FBQ3BCLElBQUksQ0FBQyxDQUFDLElBQUksSUFBSSxtQkFBbUIsQ0FBQztZQUFFLFNBQVM7UUFFN0MsSUFBSSxFQUNBLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFDM0QsUUFBUSxFQUNSLE9BQU8sRUFDUCxJQUFJLEdBQUcsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUNyQyxLQUFLLEdBQUcsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxHQUMxQyxHQUFHLHVCQUF1QixDQUFDLElBQUksRUFBRSxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFN0QsSUFBSSxVQUFVLEdBQUcsb0JBQW9CLENBQ2pDLElBQUksRUFDSixLQUFLLEVBQ0wsSUFBSSxFQUNKLEtBQUssRUFDTCxRQUFRLENBQ1gsQ0FBQztRQUVGLE1BQU0sYUFBYSxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsMkJBQTJCLENBQUMsQ0FBQztRQUV4RSxNQUFNLGlCQUFpQixHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUV4RSxpQkFBaUIsQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDO1FBRXRDLGVBQWUsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDM0M7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IFwiLi4vYXNzZXRzL21haW4uY3NzXCI7XG5cbmludGVyZmFjZSBEb21FbGVtZW50SW5mbyB7XG4gICAgLyoqXG4gICAgICogVGhlIGNsYXNzIHRvIGJlIGFzc2lnbmVkLiBDYW4gYmUgYSBzcGFjZS1zZXBhcmF0ZWQgc3RyaW5nIG9yIGFuIGFycmF5IG9mIHN0cmluZ3MuXG4gICAgICovXG4gICAgY2xzPzogc3RyaW5nIHwgc3RyaW5nW107XG4gICAgLyoqXG4gICAgICogVGhlIHRleHRDb250ZW50IHRvIGJlIGFzc2lnbmVkLlxuICAgICAqL1xuICAgIHRleHQ/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogSFRNTCBhdHRyaWJ1dGVzIHRvIGJlIGFkZGVkLlxuICAgICAqL1xuICAgIGF0dHI/OiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4gfCBudWxsO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSFRNTCB0aXRsZSAoZm9yIGhvdmVyIHRvb2x0aXApLlxuICAgICAqL1xuICAgIHRpdGxlPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBwYXJlbnQgZWxlbWVudCB0byBiZSBhc3NpZ25lZCB0by5cbiAgICAgKi9cbiAgICBwYXJlbnQ/OiBOb2RlO1xuICAgIHZhbHVlPzogc3RyaW5nO1xuICAgIHR5cGU/OiBzdHJpbmc7XG4gICAgcHJlcGVuZD86IGJvb2xlYW47XG4gICAgaHJlZj86IHN0cmluZztcbn1cblxuZnVuY3Rpb24gY3JlYXRlRWw8SyBleHRlbmRzIGtleW9mIEhUTUxFbGVtZW50VGFnTmFtZU1hcD4oXG4gICAgdGFnOiBLLFxuICAgIHQ/OiBzdHJpbmcgfCBEb21FbGVtZW50SW5mbyxcbiAgICBlPzogSFRNTEVsZW1lbnRcbik6IEhUTUxFbGVtZW50VGFnTmFtZU1hcFtLXSB7XG4gICAgY29uc3QgaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTtcbiAgICBcInN0cmluZ1wiID09IHR5cGVvZiB0ICYmXG4gICAgICAgICh0ID0ge1xuICAgICAgICAgICAgY2xzOiB0XG4gICAgICAgIH0pO1xuICAgIGNvbnN0IHIgPSB0IHx8IHt9LFxuICAgICAgICBvID0gci5jbHMsXG4gICAgICAgIHMgPSByLnRleHQsXG4gICAgICAgIGEgPSByLmF0dHIsXG4gICAgICAgIGwgPSByLnRpdGxlLFxuICAgICAgICBjID0gci52YWx1ZSxcbiAgICAgICAgdSA9IHIudHlwZSxcbiAgICAgICAgaCA9IGUgPyBlIDogci5wYXJlbnQsXG4gICAgICAgIHAgPSByLnByZXBlbmQsXG4gICAgICAgIGQgPSByLmhyZWY7XG4gICAgcmV0dXJuIChcbiAgICAgICAgbyAmJlxuICAgICAgICAgICAgKEFycmF5LmlzQXJyYXkobylcbiAgICAgICAgICAgICAgICA/IChpLmNsYXNzTmFtZSA9IG8uam9pbihcIiBcIikpXG4gICAgICAgICAgICAgICAgOiAoaS5jbGFzc05hbWUgPSBvKSksXG4gICAgICAgIHMgJiYgKGkudGV4dENvbnRlbnQgPSBzKSxcbiAgICAgICAgYSAmJlxuICAgICAgICAgICAgT2JqZWN0LmtleXMoYSkuZm9yRWFjaCgodCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBhW3RdO1xuICAgICAgICAgICAgICAgIG51bGwgIT09IG4gJiYgaS5zZXRBdHRyaWJ1dGUodCwgU3RyaW5nKG4pKTtcbiAgICAgICAgICAgIH0pLFxuICAgICAgICBsICYmIChpLnRpdGxlID0gbCksXG4gICAgICAgIGMgJiZcbiAgICAgICAgICAgIChpIGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCB8fFxuICAgICAgICAgICAgICAgIGkgaW5zdGFuY2VvZiBIVE1MU2VsZWN0RWxlbWVudCB8fFxuICAgICAgICAgICAgICAgIGkgaW5zdGFuY2VvZiBIVE1MT3B0aW9uRWxlbWVudCkgJiZcbiAgICAgICAgICAgIChpLnZhbHVlID0gYyksXG4gICAgICAgIC8qIHUgJiYgaSBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQgJiYgKGkudHlwZSA9IHUpLCAqL1xuICAgICAgICB1ICYmIGkgaW5zdGFuY2VvZiBIVE1MU3R5bGVFbGVtZW50ICYmIGkuc2V0QXR0cmlidXRlKFwidHlwZVwiLCB1KSxcbiAgICAgICAgZCAmJlxuICAgICAgICAgICAgKGkgaW5zdGFuY2VvZiBIVE1MQW5jaG9yRWxlbWVudCB8fCBpIGluc3RhbmNlb2YgSFRNTExpbmtFbGVtZW50KSAmJlxuICAgICAgICAgICAgKGkuaHJlZiA9IGQpLFxuICAgICAgICBoICYmIChwID8gaC5pbnNlcnRCZWZvcmUoaSwgaC5maXJzdENoaWxkKSA6IGguYXBwZW5kQ2hpbGQoaSkpLFxuICAgICAgICBpXG4gICAgKTtcbn1cbi8vQHRzLWlnbm9yZS1saW5lXG5jb25zdCBjcmVhdGVEaXYgPSBmdW5jdGlvbiAoXG4gICAgbz86IHN0cmluZyB8IERvbUVsZW1lbnRJbmZvLFxuICAgIGU/OiBIVE1MRWxlbWVudFxuKTogSFRNTERpdkVsZW1lbnQge1xuICAgIHJldHVybiBjcmVhdGVFbChcImRpdlwiLCBvLCBlKTtcbn07XG5cbk5vZGUucHJvdG90eXBlLmNyZWF0ZURpdiA9IGZ1bmN0aW9uIChcbiAgICBvPzogc3RyaW5nIHwgRG9tRWxlbWVudEluZm8sXG4gICAgY2I/OiAoZWw6IEhUTUxEaXZFbGVtZW50KSA9PiB2b2lkXG4pOiBIVE1MRGl2RWxlbWVudCB7XG4gICAgcmV0dXJuIGNyZWF0ZURpdihvLCB0aGlzKTtcbn07XG5Ob2RlLnByb3RvdHlwZS5jcmVhdGVFbCA9IGZ1bmN0aW9uIDxLIGV4dGVuZHMga2V5b2YgSFRNTEVsZW1lbnRUYWdOYW1lTWFwPihcbiAgICB0YWc6IEssXG4gICAgbz86IHN0cmluZyB8IERvbUVsZW1lbnRJbmZvLFxuICAgIGNiPzogKGVsOiBIVE1MRWxlbWVudFRhZ05hbWVNYXBbS10pID0+IHZvaWRcbik6IEhUTUxFbGVtZW50VGFnTmFtZU1hcFtLXSB7XG4gICAgcmV0dXJuIGNyZWF0ZUVsKHRhZywgbywgdGhpcyk7XG59O1xuXG5FbGVtZW50LnByb3RvdHlwZS5hZGRDbGFzcyA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgY29uc3QgZSA9IFtdO1xuICAgIGZvciAobGV0IHQgPSAwOyB0IDwgYXJncy5sZW5ndGg7IHQrKykgZVt0XSA9IGFyZ3NbdF07XG4gICAgdGhpcy5hZGRDbGFzc2VzKGUpO1xufTtcblxuRWxlbWVudC5wcm90b3R5cGUuYWRkQ2xhc3NlcyA9IGZ1bmN0aW9uIChlKSB7XG4gICAgZm9yIChsZXQgdCA9IDA7IHQgPCBlLmxlbmd0aDsgdCsrKSB0aGlzLmNsYXNzTGlzdC5hZGQoZVt0XSk7XG59O1xuXG5mdW5jdGlvbiBnZXRBZG1vbml0aW9uRWxlbWVudChcbiAgICB0eXBlOiBzdHJpbmcsXG4gICAgdGl0bGU6IHN0cmluZyxcbiAgICBpY29uOiBzdHJpbmcsXG4gICAgY29sb3I6IHN0cmluZyxcbiAgICBjb2xsYXBzZT86IHN0cmluZyxcbiAgICBpZD86IHN0cmluZ1xuKTogSFRNTEVsZW1lbnQge1xuICAgIGxldCBhZG1vbml0aW9uLFxuICAgICAgICB0aXRsZUVsLFxuICAgICAgICBhdHRyczogeyBzdHlsZTogc3RyaW5nOyBvcGVuPzogc3RyaW5nIH0gPSB7XG4gICAgICAgICAgICBzdHlsZTogYC0tYWRtb25pdGlvbi1jb2xvcjogJHtjb2xvcn07YFxuICAgICAgICB9O1xuICAgIGlmIChjb2xsYXBzZSAmJiBjb2xsYXBzZSAhPSBcIm5vbmVcIikge1xuICAgICAgICBpZiAoY29sbGFwc2UgPT09IFwib3BlblwiKSB7XG4gICAgICAgICAgICBhdHRycy5vcGVuID0gXCJvcGVuXCI7XG4gICAgICAgIH1cbiAgICAgICAgYWRtb25pdGlvbiA9IGNyZWF0ZUVsKFwiZGV0YWlsc1wiLCB7XG4gICAgICAgICAgICBjbHM6IGBhZG1vbml0aW9uIGFkbW9uaXRpb24tJHt0eXBlfSBhZG1vbml0aW9uLXBsdWdpbmAsXG4gICAgICAgICAgICBhdHRyOiBhdHRyc1xuICAgICAgICB9KTtcbiAgICAgICAgdGl0bGVFbCA9IGFkbW9uaXRpb24uY3JlYXRlRWwoXCJzdW1tYXJ5XCIsIHtcbiAgICAgICAgICAgIGNsczogYGFkbW9uaXRpb24tdGl0bGUgJHshdGl0bGU/LnRyaW0oKS5sZW5ndGggPyBcIm5vLXRpdGxlXCIgOiBcIlwifWBcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYWRtb25pdGlvbiA9IGNyZWF0ZURpdih7XG4gICAgICAgICAgICBjbHM6IGBhZG1vbml0aW9uIGFkbW9uaXRpb24tJHt0eXBlfSBhZG1vbml0aW9uLXBsdWdpbmAsXG4gICAgICAgICAgICBhdHRyOiBhdHRyc1xuICAgICAgICB9KTtcbiAgICAgICAgdGl0bGVFbCA9IGFkbW9uaXRpb24uY3JlYXRlRGl2KHtcbiAgICAgICAgICAgIGNsczogYGFkbW9uaXRpb24tdGl0bGUgJHshdGl0bGU/LnRyaW0oKS5sZW5ndGggPyBcIm5vLXRpdGxlXCIgOiBcIlwifWBcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGlkKSB7XG4gICAgICAgIGFkbW9uaXRpb24uaWQgPSBpZDtcbiAgICB9XG5cbiAgICBpZiAodGl0bGUgJiYgdGl0bGUudHJpbSgpLmxlbmd0aCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGl0bGUgc3RydWN0dXJlXG4gICAgICAgICAqIDxkaXZ8c3VtbWFyeT4uYWRtb25pdGlvbi10aXRsZVxuICAgICAgICAgKiAgICAgIDxlbGVtZW50Pi5hZG1vbml0aW9uLXRpdGxlLWNvbnRlbnQgLSBSZW5kZXJlZCBNYXJrZG93biB0b3AtbGV2ZWwgZWxlbWVudCAoZS5nLiBIMS8yLzMgZXRjLCBwKVxuICAgICAgICAgKiAgICAgICAgICBkaXYuYWRtb25pdGlvbi10aXRsZS1pY29uXG4gICAgICAgICAqICAgICAgICAgICAgICBzdmdcbiAgICAgICAgICogICAgICAgICAgZGl2LmFkbW9uaXRpb24tdGl0bGUtbWFya2Rvd24gLSBDb250YWluZXIgb2YgcmVuZGVyZWQgbWFya2Rvd25cbiAgICAgICAgICogICAgICAgICAgICAgIC4uLnJlbmRlcmVkIG1hcmtkb3duIGNoaWxkcmVuLi4uXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8vZ2V0IG1hcmtkb3duXG4gICAgICAgIGNvbnN0IG1hcmtkb3duSG9sZGVyID0gY3JlYXRlRGl2KCk7XG4gICAgICAgIC8vTWFya2Rvd25SZW5kZXJlci5yZW5kZXJNYXJrZG93bih0aXRsZSwgbWFya2Rvd25Ib2xkZXIsIFwiXCIsIG51bGwpO1xuXG4gICAgICAgIC8vYWRtb25pdGlvbi10aXRsZS1jb250ZW50IGlzIGZpcnN0IGNoaWxkIG9mIHJlbmRlcmVkIG1hcmtkb3duXG5cbiAgICAgICAgY29uc3QgYWRtb25pdGlvblRpdGxlQ29udGVudCA9XG4gICAgICAgICAgICAvKiBtYXJrZG93bkhvbGRlcj8uY2hpbGRyZW5bMF0/LnRhZ05hbWUgPT09IFwiUFwiXG4gICAgICAgID8gY3JlYXRlRGl2KClcbiAgICAgICAgOiBtYXJrZG93bkhvbGRlci5jaGlsZHJlblswXSA/PyAgKi8gY3JlYXRlRGl2KCk7XG5cblxuICAgICAgICAvL2dldCBjaGlsZHJlbiBvZiBtYXJrZG93biBlbGVtZW50LCB0aGVuIHJlbW92ZSB0aGVtXG4gICAgICAgIGNvbnN0IG1hcmtkb3duRWxlbWVudHMgPSBBcnJheS5mcm9tKFxuICAgICAgICAgICAgbWFya2Rvd25Ib2xkZXIuY2hpbGRyZW5bMF0/LmNoaWxkTm9kZXMgfHwgW11cbiAgICAgICAgKTtcbiAgICAgICAgYWRtb25pdGlvblRpdGxlQ29udGVudC5pbm5lckhUTUwgPSBcIlwiO1xuICAgICAgICBhZG1vbml0aW9uVGl0bGVDb250ZW50LmFkZENsYXNzKFwiYWRtb25pdGlvbi10aXRsZS1jb250ZW50XCIpO1xuXG4gICAgICAgIC8vYnVpbGQgaWNvbiBlbGVtZW50XG4gICAgICAgIGNvbnN0IGljb25FbCA9IGFkbW9uaXRpb25UaXRsZUNvbnRlbnQuY3JlYXRlRGl2KFxuICAgICAgICAgICAgXCJhZG1vbml0aW9uLXRpdGxlLWljb25cIlxuICAgICAgICApO1xuICAgICAgICBpZiAoaWNvbikge1xuICAgICAgICAgICAgaWNvbkVsLmlubmVySFRNTCA9IGljb247XG4gICAgICAgIH1cblxuICAgICAgICAvL2FkZCBtYXJrZG93biBjaGlsZHJlbiBiYWNrXG4gICAgICAgIGNvbnN0IGFkbW9uaXRpb25UaXRsZU1hcmtkb3duID0gYWRtb25pdGlvblRpdGxlQ29udGVudC5jcmVhdGVEaXYoXG4gICAgICAgICAgICBcImFkbW9uaXRpb24tdGl0bGUtbWFya2Rvd25cIlxuICAgICAgICApO1xuICAgICAgICBhZG1vbml0aW9uVGl0bGVNYXJrZG93bi5pbm5lclRleHQgPSB0aXRsZTtcbiAgICAgICAgLyogZm9yIChsZXQgaSA9IDA7IGkgPCBtYXJrZG93bkVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhZG1vbml0aW9uVGl0bGVNYXJrZG93bi5hcHBlbmRDaGlsZChtYXJrZG93bkVsZW1lbnRzW2ldKTtcbiAgICAgICAgfSAqL1xuICAgICAgICB0aXRsZUVsLmFwcGVuZENoaWxkKGFkbW9uaXRpb25UaXRsZUNvbnRlbnQgfHwgY3JlYXRlRGl2KCkpO1xuICAgIH1cblxuICAgIC8vYWRkIHRoZW0gdG8gdGl0bGUgZWxlbWVudFxuXG4gICAgaWYgKGNvbGxhcHNlKSB7XG4gICAgICAgIHRpdGxlRWwuY3JlYXRlRGl2KFwiY29sbGFwc2VyXCIpLmNyZWF0ZURpdihcImhhbmRsZVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGFkbW9uaXRpb247XG59XG5mdW5jdGlvbiBzdGFydHNXaXRoQW55KHN0cjogc3RyaW5nLCBuZWVkbGVzOiBzdHJpbmdbXSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmVlZGxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoc3RyLnN0YXJ0c1dpdGgobmVlZGxlc1tpXSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBnZXRQYXJhbWV0ZXJzRnJvbVNvdXJjZSh0eXBlOiBzdHJpbmcsIHNyYzogc3RyaW5nKSB7XG4gICAgY29uc3Qga2V5d29yZFRva2VucyA9IFtcInRpdGxlOlwiLCBcImNvbGxhcHNlOlwiLCBcImljb246XCIsIFwiY29sb3I6XCJdO1xuXG4gICAgY29uc3Qga2V5d29yZHMgPSBbXCJ0aXRsZVwiLCBcImNvbGxhcHNlXCIsIFwiaWNvblwiLCBcImNvbG9yXCJdO1xuXG4gICAgbGV0IGxpbmVzID0gc3JjLnNwbGl0KFwiXFxuXCIpO1xuXG4gICAgbGV0IHNraXBMaW5lcyA9IDA7XG5cbiAgICBsZXQgcGFyYW1zOiB7IFtrOiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9O1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQga2V5d29yZEluZGV4ID0gc3RhcnRzV2l0aEFueShsaW5lc1tpXSwga2V5d29yZFRva2Vucyk7XG5cbiAgICAgICAgaWYgKGtleXdvcmRJbmRleCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGZvdW5kS2V5d29yZCA9IGtleXdvcmRzW2tleXdvcmRJbmRleF07XG5cbiAgICAgICAgaWYgKHBhcmFtc1tmb3VuZEtleXdvcmRdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyYW1zW2ZvdW5kS2V5d29yZF0gPSBsaW5lc1tpXVxuICAgICAgICAgICAgLnN1YnN0cihrZXl3b3JkVG9rZW5zW2tleXdvcmRJbmRleF0ubGVuZ3RoKVxuICAgICAgICAgICAgLnRyaW0oKTtcbiAgICAgICAgKytza2lwTGluZXM7XG4gICAgfVxuXG4gICAgbGV0IHtcbiAgICAgICAgdGl0bGUgPSB0eXBlWzBdLnRvVXBwZXJDYXNlKCkgKyB0eXBlLnNsaWNlKDEpLnRvTG93ZXJDYXNlKCksXG4gICAgICAgIGNvbGxhcHNlLFxuICAgICAgICBpY29uLFxuICAgICAgICBjb2xvclxuICAgIH0gPSBwYXJhbXM7XG5cbiAgICBsZXQgY29udGVudCA9IGxpbmVzLnNsaWNlKHNraXBMaW5lcykuam9pbihcIlxcblwiKTtcblxuICAgIC8qKlxuICAgICAqIElmIHRoZSBhZG1vbml0aW9uIHNob3VsZCBjb2xsYXBzZSwgYnV0IHNvbWV0aGluZyBvdGhlciB0aGFuIG9wZW4gb3IgY2xvc2VkIHdhcyBwcm92aWRlZCwgc2V0IHRvIGNsb3NlZC5cbiAgICAgKi9cbiAgICBpZiAoXG4gICAgICAgIGNvbGxhcHNlICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgY29sbGFwc2UgIT09IFwibm9uZVwiICYmXG4gICAgICAgIGNvbGxhcHNlICE9PSBcIm9wZW5cIiAmJlxuICAgICAgICBjb2xsYXBzZSAhPT0gXCJjbG9zZWRcIlxuICAgICkge1xuICAgICAgICBjb2xsYXBzZSA9IFwiY2xvc2VkXCI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSWYgdGhlIGFkbW9uaXRpb24gc2hvdWxkIGNvbGxhcHNlLCBidXQgdGl0bGUgd2FzIGJsYW5rZWQsIHNldCB0aGUgZGVmYXVsdCB0aXRsZS5cbiAgICAgKi9cbiAgICBpZiAodGl0bGUudHJpbSgpID09PSBcIlwiICYmIGNvbGxhcHNlICE9PSB1bmRlZmluZWQgJiYgY29sbGFwc2UgIT09IFwibm9uZVwiKSB7XG4gICAgICAgIHRpdGxlID0gdHlwZVswXS50b1VwcGVyQ2FzZSgpICsgdHlwZS5zbGljZSgxKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgdGl0bGUsIGNvbGxhcHNlLCBjb250ZW50LCBpY29uLCBjb2xvciB9O1xufVxuXG5pbnRlcmZhY2UgQWRtb25pdGlvblB1Ymxpc2hEZWZpbml0aW9uIHtcbiAgICBpY29uOiBzdHJpbmc7XG4gICAgY29sb3I6IHN0cmluZztcbn1cblxuY29uc3QgQURNT05JVElPTl9JQ09OX01BUDogeyBbYWRtb25pdGlvblR5cGU6IHN0cmluZ106IEFkbW9uaXRpb25QdWJsaXNoRGVmaW5pdGlvbiB9ID0ge307XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vZG8gd29ya1xuXG4gICAgY29uc3QgYWRtb25pdGlvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgICBcInByZVtjbGFzc149J2xhbmd1YWdlLWFkJ11cIlxuICAgICkgYXMgTm9kZUxpc3RPZjxIVE1MUHJlRWxlbWVudD47XG5cbiAgICBpZiAoIWFkbW9uaXRpb25zLmxlbmd0aCkgcmV0dXJuO1xuXG4gICAgZm9yIChsZXQgYWRtb25pdGlvbkJsb2NrIG9mIEFycmF5LmZyb20oYWRtb25pdGlvbnMpKSB7XG5cbiAgICAgICAgY29uc3QgWywgdHlwZV0gPSBhZG1vbml0aW9uQmxvY2suY2xhc3NMaXN0LnRvU3RyaW5nKCkubWF0Y2goL2xhbmd1YWdlLWFkLShcXHcrKS8pO1xuICAgICAgICBpZiAoIXR5cGUpIGNvbnRpbnVlO1xuICAgICAgICBpZiAoISh0eXBlIGluIEFETU9OSVRJT05fSUNPTl9NQVApKSBjb250aW51ZTtcblxuICAgICAgICBsZXQge1xuICAgICAgICAgICAgdGl0bGUgPSB0eXBlWzBdLnRvVXBwZXJDYXNlKCkgKyB0eXBlLnNsaWNlKDEpLnRvTG93ZXJDYXNlKCksXG4gICAgICAgICAgICBjb2xsYXBzZSxcbiAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgICBpY29uID0gQURNT05JVElPTl9JQ09OX01BUFt0eXBlXS5pY29uLFxuICAgICAgICAgICAgY29sb3IgPSBBRE1PTklUSU9OX0lDT05fTUFQW3R5cGVdLmNvbG9yLFxuICAgICAgICB9ID0gZ2V0UGFyYW1ldGVyc0Zyb21Tb3VyY2UodHlwZSwgYWRtb25pdGlvbkJsb2NrLmlubmVyVGV4dCk7XG5cbiAgICAgICAgbGV0IGFkbW9uaXRpb24gPSBnZXRBZG1vbml0aW9uRWxlbWVudChcbiAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICB0aXRsZSxcbiAgICAgICAgICAgIGljb24sXG4gICAgICAgICAgICBjb2xvcixcbiAgICAgICAgICAgIGNvbGxhcHNlXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgY29udGVudEhvbGRlciA9IGFkbW9uaXRpb24uY3JlYXRlRGl2KFwiYWRtb25pdGlvbi1jb250ZW50LWhvbGRlclwiKTtcblxuICAgICAgICBjb25zdCBhZG1vbml0aW9uQ29udGVudCA9IGNvbnRlbnRIb2xkZXIuY3JlYXRlRGl2KFwiYWRtb25pdGlvbi1jb250ZW50XCIpO1xuXG4gICAgICAgIGFkbW9uaXRpb25Db250ZW50LmlubmVyVGV4dCA9IGNvbnRlbnQ7XG5cbiAgICAgICAgYWRtb25pdGlvbkJsb2NrLnJlcGxhY2VXaXRoKGFkbW9uaXRpb24pO1xuICAgIH1cbn0pO1xuIl19
var __webpack_export_target__ = exports;
for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
/******/ })()
;